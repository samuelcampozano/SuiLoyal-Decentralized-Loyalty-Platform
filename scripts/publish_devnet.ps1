# Cross-platform PowerShell deploy script for SuiLoyal (Devnet)
$ErrorActionPreference = 'Stop'

Write-Host "🚀 Starting SuiLoyal deployment (PowerShell)..."

# Ensure sui is available
if (-not (Get-Command sui -ErrorAction SilentlyContinue)) {
    Write-Error "Sui CLI is not installed or not in PATH. See https://docs.sui.io/build/install"
}

# Active env
$envName = (sui client active-env).Trim()
Write-Host "📍 Current Sui environment: $envName"
if ($envName -ne 'devnet') {
    Write-Host 'Switching to devnet...'
    sui client switch --env devnet | Out-Null
}

# Active address
$address = (sui client active-address).Trim()
Write-Host "💳 Active address: $address"

# Balance check (best-effort; skips if jq not installed)
try {
    $gasJson = sui client gas --json | ConvertFrom-Json
    $balance = [int64]$gasJson[0].gasBalance
    if ($balance -lt 100000000) { throw 'Insufficient balance (< 0.1 SUI)' }
    $suiBal = [math]::Round($balance / 1e9, 3)
    Write-Host "💰 Balance: $suiBal SUI"
}
catch {
    Write-Warning 'Skipping balance check (jq/parse not available).'
}

# Build, test, and publish
$pkgPath = Join-Path $PSScriptRoot '..' 'sui-packages' 'Loyalty'
Push-Location $pkgPath
try {
    Write-Host '🔨 Building Move package...'
    sui move build
    Write-Host '🧪 Running tests...'
    sui move test
    Write-Host '📦 Publishing package to devnet...'
    $publish = sui client publish --gas-budget 100000000 --json
    $publishObj = $publish | ConvertFrom-Json
    $created = $publishObj.effects.created
    $packageId = ($created | Where-Object { $_.owner -eq 'Immutable' }).reference.objectId
    $platformId = ($created | Where-Object { $_.owner -eq 'Shared' }).reference.objectId

    if (-not $packageId) { throw 'Failed to extract packageId' }

    Write-Host '✅ Deployment successful!'
    Write-Host "Package ID: $packageId"
    Write-Host "Platform ID: $platformId"

    # Save deployment info
    Pop-Location
    $deploymentFile = Join-Path $PSScriptRoot '..' 'deployment.json'
    $now = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
    $deployment = @{ network = 'devnet'; packageId = $packageId; platformId = $platformId; deployer = $address; timestamp = $now } | ConvertTo-Json
    Set-Content -LiteralPath $deploymentFile -Value $deployment -Encoding UTF8
    Write-Host "💾 Deployment info saved to: $deploymentFile"

    # Update frontend config
    $frontendConfig = Join-Path $PSScriptRoot '..' 'frontend' 'src' 'config.ts'
    $configContent = @("// Auto-generated by publish_devnet.ps1", "export const SUI_CONFIG = {", "  PACKAGE_ID: '$packageId',", "  PLATFORM_ID: '$platformId',", "  NETWORK: 'devnet' as const,", "};") -join "`n"
    Set-Content -LiteralPath $frontendConfig -Value $configContent -Encoding UTF8
    Write-Host '📝 Frontend config updated'

    Write-Host "🔍 Explorer: https://suiexplorer.com/object/$packageId?network=devnet"
    Write-Host "🔍 Explorer: https://suiexplorer.com/object/$platformId?network=devnet"
}
finally {
    if ((Get-Location).Path -like "*$pkgPath*") { Pop-Location }
}
